# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule EveESI.Api.Corporation do
  @moduledoc """
  API calls for all endpoints tagged `Corporation`.
  """

  alias EveESI.Connection
  import EveESI.RequestBuilder

  @doc """
  Get corporation information
  Public information about a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/`  Alternate route: `/v5/corporations/{corporation_id}/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, EveESI.Model.GetCorporationsCorporationIdOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdOk.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {404, EveESI.Model.GetCorporationsCorporationIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get alliance history
  Get a list of all the alliances a corporation has been a member of  --- Alternate route: `/dev/corporations/{corporation_id}/alliancehistory/`  Alternate route: `/v3/corporations/{corporation_id}/alliancehistory/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdAlliancehistory200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_alliancehistory(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdAlliancehistory200Ok.t]} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_alliancehistory(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/alliancehistory/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdAlliancehistory200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation blueprints
  Returns a list of blueprints the corporation owns  --- Alternate route: `/dev/corporations/{corporation_id}/blueprints/`  Alternate route: `/v3/corporations/{corporation_id}/blueprints/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdBlueprints200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_blueprints(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdBlueprints200Ok.t]} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_blueprints(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/blueprints/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdBlueprints200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get all corporation ALSC logs
  Returns logs recorded in the past seven days from all audit log secure containers (ALSC) owned by a given corporation  --- Alternate route: `/dev/corporations/{corporation_id}/containers/logs/`  Alternate route: `/v3/corporations/{corporation_id}/containers/logs/`  --- This route is cached for up to 600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdContainersLogs200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_containers_logs(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdContainersLogs200Ok.t]} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_containers_logs(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/containers/logs/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdContainersLogs200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation divisions
  Return corporation hangar and wallet division names, only show if a division is not using the default name  --- Alternate route: `/dev/corporations/{corporation_id}/divisions/`  Alternate route: `/v2/corporations/{corporation_id}/divisions/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.GetCorporationsCorporationIdDivisionsOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_divisions(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdDivisionsOk.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_divisions(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/divisions/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdDivisionsOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation facilities
  Return a corporation's facilities  --- Alternate route: `/dev/corporations/{corporation_id}/facilities/`  Alternate route: `/v2/corporations/{corporation_id}/facilities/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdFacilities200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_facilities(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdFacilities200Ok.t]} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_facilities(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/facilities/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdFacilities200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation icon
  Get the icon urls for a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/icons/`  Alternate route: `/v2/corporations/{corporation_id}/icons/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, EveESI.Model.GetCorporationsCorporationIdIconsOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_icons(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdIconsNotFound.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdIconsOk.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_icons(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/icons/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdIconsOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {404, EveESI.Model.GetCorporationsCorporationIdIconsNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation medals
  Returns a corporation's medals  --- Alternate route: `/dev/corporations/{corporation_id}/medals/`  Alternate route: `/v2/corporations/{corporation_id}/medals/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdMedals200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_medals(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdMedals200Ok.t]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_medals(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/medals/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdMedals200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation issued medals
  Returns medals issued by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/medals/issued/`  Alternate route: `/v2/corporations/{corporation_id}/medals/issued/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdMedalsIssued200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_medals_issued(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdMedalsIssued200Ok.t]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_medals_issued(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/medals/issued/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdMedalsIssued200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation members
  Return the current member list of a corporation, the token's character need to be a member of the corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/members/`  Alternate route: `/v4/corporations/{corporation_id}/members/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%Integer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_members(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [integer()]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_members(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/members/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation member limit
  Return a corporation's member limit, not including CEO himself  --- Alternate route: `/dev/corporations/{corporation_id}/members/limit/`  Alternate route: `/v2/corporations/{corporation_id}/members/limit/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, integer()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_members_limit(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, integer()} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_members_limit(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/members/limit/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation's members' titles
  Returns a corporation's members' titles  --- Alternate route: `/dev/corporations/{corporation_id}/members/titles/`  Alternate route: `/v2/corporations/{corporation_id}/members/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdMembersTitles200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_members_titles(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdMembersTitles200Ok.t]} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_members_titles(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/members/titles/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdMembersTitles200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Track corporation members
  Returns additional information about a corporation's members which helps tracking their activities  --- Alternate route: `/dev/corporations/{corporation_id}/membertracking/`  Alternate route: `/v2/corporations/{corporation_id}/membertracking/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdMembertracking200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_membertracking(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdMembertracking200Ok.t]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_membertracking(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/membertracking/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdMembertracking200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation member roles
  Return the roles of all members if the character has the personnel manager role or any grantable role.  --- Alternate route: `/dev/corporations/{corporation_id}/roles/`  Alternate route: `/v2/corporations/{corporation_id}/roles/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdRoles200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_roles(Tesla.Env.client, integer(), keyword()) :: {:ok, [EveESI.Model.GetCorporationsCorporationIdRoles200Ok.t]} | {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_roles(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/roles/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdRoles200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation member roles history
  Return how roles have changed for a coporation's members, up to a month  --- Alternate route: `/dev/corporations/{corporation_id}/roles/history/`  Alternate route: `/v2/corporations/{corporation_id}/roles/history/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdRolesHistory200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_roles_history(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdRolesHistory200Ok.t]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_roles_history(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/roles/history/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdRolesHistory200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation shareholders
  Return the current shareholders of a corporation.  --- Alternate route: `/dev/corporations/{corporation_id}/shareholders/`  Alternate route: `/legacy/corporations/{corporation_id}/shareholders/`  Alternate route: `/v1/corporations/{corporation_id}/shareholders/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdShareholders200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_shareholders(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdShareholders200Ok.t]} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_shareholders(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/shareholders/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdShareholders200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation standings
  Return corporation standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/corporations/{corporation_id}/standings/`  Alternate route: `/v2/corporations/{corporation_id}/standings/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdStandings200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_standings(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdStandings200Ok.t]} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_standings(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/standings/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdStandings200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation starbases (POSes)
  Returns list of corporation starbases (POSes)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdStarbases200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_starbases(Tesla.Env.client, integer(), keyword()) :: {:ok, [EveESI.Model.GetCorporationsCorporationIdStarbases200Ok.t]} | {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_starbases(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/starbases/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdStarbases200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get starbase (POS) detail
  Returns various settings and fuels of a starbase (POS)  --- Alternate route: `/dev/corporations/{corporation_id}/starbases/{starbase_id}/`  Alternate route: `/v2/corporations/{corporation_id}/starbases/{starbase_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `starbase_id` (integer()): An EVE starbase (POS) ID
  - `system_id` (integer()): The solar system this starbase (POS) is located in,
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.GetCorporationsCorporationIdStarbasesStarbaseIdOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_starbases_starbase_id(Tesla.Env.client, integer(), integer(), integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GetCorporationsCorporationIdStarbasesStarbaseIdOk.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_starbases_starbase_id(connection, corporation_id, starbase_id, system_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/starbases/#{starbase_id}/")
      |> add_param(:query, :system_id, system_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdStarbasesStarbaseIdOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation structures
  Get a list of corporation structures. This route's version includes the changes to structures detailed in this blog: https://www.eveonline.com/article/upwell-2.0-structures-changes-coming-on-february-13th  --- Alternate route: `/dev/corporations/{corporation_id}/structures/`  Alternate route: `/v4/corporations/{corporation_id}/structures/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): Language to use in the response
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:language` (String.t): Language to use in the response, takes precedence over Accept-Language
    - `:page` (integer()): Which page of results to return
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdStructures200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_structures(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdStructures200Ok.t]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_structures(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers,
      :datasource => :query,
      :"If-None-Match" => :headers,
      :language => :query,
      :page => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/structures/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdStructures200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get corporation titles
  Returns a corporation's titles  --- Alternate route: `/dev/corporations/{corporation_id}/titles/`  Alternate route: `/v2/corporations/{corporation_id}/titles/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Director 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `corporation_id` (integer()): An EVE corporation ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetCorporationsCorporationIdTitles200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_corporation_id_titles(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, [EveESI.Model.GetCorporationsCorporationIdTitles200Ok.t]} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_corporation_id_titles(connection, corporation_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/#{corporation_id}/titles/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCorporationsCorporationIdTitles200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get npc corporations
  Get a list of npc corporations  --- Alternate route: `/dev/corporations/npccorps/`  Alternate route: `/v2/corporations/npccorps/`  --- This route expires daily at 11:05

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, [%Integer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_corporations_npccorps(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [integer()]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_corporations_npccorps(connection, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/corporations/npccorps/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end
end
