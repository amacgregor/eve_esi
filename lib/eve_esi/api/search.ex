# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule EveESI.Api.Search do
  @moduledoc """
  API calls for all endpoints tagged `Search`.
  """

  alias EveESI.Connection
  import EveESI.RequestBuilder

  @doc """
  Search on a string
  Search for entities that match a given sub-string.  --- Alternate route: `/dev/characters/{character_id}/search/`  Alternate route: `/legacy/characters/{character_id}/search/`  Alternate route: `/v3/characters/{character_id}/search/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `categories` ([String.t]): Type of entities to search for
  - `character_id` (integer()): An EVE character ID
  - `search` (String.t): The string to search on
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): Language to use in the response
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:language` (String.t): Language to use in the response, takes precedence over Accept-Language
    - `:strict` (boolean()): Whether the search should be a strict match
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.GetCharactersCharacterIdSearchOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_characters_character_id_search(Tesla.Env.client, list(String.t), integer(), String.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetCharactersCharacterIdSearchOk.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_characters_character_id_search(connection, categories, character_id, search, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers,
      :datasource => :query,
      :"If-None-Match" => :headers,
      :language => :query,
      :strict => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/characters/#{character_id}/search/")
      |> add_param(:query, :categories, categories)
      |> add_param(:query, :search, search)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCharactersCharacterIdSearchOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end
end
