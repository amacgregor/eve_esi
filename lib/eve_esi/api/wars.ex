# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule EveESI.Api.Wars do
  @moduledoc """
  API calls for all endpoints tagged `Wars`.
  """

  alias EveESI.Connection
  import EveESI.RequestBuilder

  @doc """
  List wars
  Return a list of wars  --- Alternate route: `/dev/wars/`  Alternate route: `/legacy/wars/`  Alternate route: `/v1/wars/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:max_war_id` (integer()): Only return wars with ID smaller than this

  ### Returns

  - `{:ok, [%Integer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wars(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [integer()]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_wars(connection, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :max_war_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/wars/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get war information
  Return details about a war  --- Alternate route: `/dev/wars/{war_id}/`  Alternate route: `/legacy/wars/{war_id}/`  Alternate route: `/v1/wars/{war_id}/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `war_id` (integer()): ID for a war
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, EveESI.Model.GetWarsWarIdOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wars_war_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetWarsWarIdOk.t} | {:ok, EveESI.Model.GetWarsWarIdUnprocessableEntity.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_wars_war_id(connection, war_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/wars/#{war_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetWarsWarIdOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {420, EveESI.Model.ErrorLimited},
      {422, EveESI.Model.GetWarsWarIdUnprocessableEntity},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  List kills for a war
  Return a list of kills related to a war  --- Alternate route: `/dev/wars/{war_id}/killmails/`  Alternate route: `/legacy/wars/{war_id}/killmails/`  Alternate route: `/v1/wars/{war_id}/killmails/`  --- This route is cached for up to 3600 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `war_id` (integer()): A valid war ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:page` (integer()): Which page of results to return

  ### Returns

  - `{:ok, [%GetWarsWarIdKillmails200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wars_war_id_killmails(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.GetWarsWarIdKillmailsUnprocessableEntity.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, [EveESI.Model.GetWarsWarIdKillmails200Ok.t]} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_wars_war_id_killmails(connection, war_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/wars/#{war_id}/killmails/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetWarsWarIdKillmails200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {420, EveESI.Model.ErrorLimited},
      {422, EveESI.Model.GetWarsWarIdKillmailsUnprocessableEntity},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end
end
