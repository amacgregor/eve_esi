# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule EveESI.Api.Fleets do
  @moduledoc """
  API calls for all endpoints tagged `Fleets`.
  """

  alias EveESI.Connection
  import EveESI.RequestBuilder

  @doc """
  Kick fleet member
  Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `member_id` (integer()): The character ID of a member in this fleet
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_fleets_fleet_id_members_member_id(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.DeleteFleetsFleetIdMembersMemberIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def delete_fleets_fleet_id_members_member_id(connection, fleet_id, member_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/fleets/#{fleet_id}/members/#{member_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.DeleteFleetsFleetIdMembersMemberIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Delete fleet squad
  Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `squad_id` (integer()): The squad to delete
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_fleets_fleet_id_squads_squad_id(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.DeleteFleetsFleetIdSquadsSquadIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def delete_fleets_fleet_id_squads_squad_id(connection, fleet_id, squad_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/fleets/#{fleet_id}/squads/#{squad_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.DeleteFleetsFleetIdSquadsSquadIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Delete fleet wing
  Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `wing_id` (integer()): The wing to delete
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_fleets_fleet_id_wings_wing_id(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.DeleteFleetsFleetIdWingsWingIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def delete_fleets_fleet_id_wings_wing_id(connection, fleet_id, wing_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/fleets/#{fleet_id}/wings/#{wing_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.DeleteFleetsFleetIdWingsWingIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get character fleet info
  Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `character_id` (integer()): An EVE character ID
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.GetCharactersCharacterIdFleetOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_characters_character_id_fleet(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.GetCharactersCharacterIdFleetNotFound.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetCharactersCharacterIdFleetOk.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_characters_character_id_fleet(connection, character_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/characters/#{character_id}/fleet/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetCharactersCharacterIdFleetOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.GetCharactersCharacterIdFleetNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get fleet information
  Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.GetFleetsFleetIdOk.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_fleets_fleet_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.GetFleetsFleetIdNotFound.t} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GetFleetsFleetIdOk.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_fleets_fleet_id(connection, fleet_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :"If-None-Match" => :headers,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/fleets/#{fleet_id}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetFleetsFleetIdOk},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.GetFleetsFleetIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get fleet members
  Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): Language to use in the response
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:language` (String.t): Language to use in the response, takes precedence over Accept-Language
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetFleetsFleetIdMembers200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_fleets_fleet_id_members(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.GetFleetsFleetIdMembersNotFound.t} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, [EveESI.Model.GetFleetsFleetIdMembers200Ok.t]} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_fleets_fleet_id_members(connection, fleet_id, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers,
      :datasource => :query,
      :"If-None-Match" => :headers,
      :language => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/fleets/#{fleet_id}/members/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetFleetsFleetIdMembers200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.GetFleetsFleetIdMembersNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Get fleet wings
  Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `opts` (keyword): Optional parameters
    - `:"Accept-Language"` (String.t): Language to use in the response
    - `:datasource` (String.t): The server name you would like data from
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag
    - `:language` (String.t): Language to use in the response, takes precedence over Accept-Language
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, [%GetFleetsFleetIdWings200Ok{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_fleets_fleet_id_wings(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, [EveESI.Model.GetFleetsFleetIdWings200Ok.t]} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GetFleetsFleetIdWingsNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_fleets_fleet_id_wings(connection, fleet_id, opts \\ []) do
    optional_params = %{
      :"Accept-Language" => :headers,
      :datasource => :query,
      :"If-None-Match" => :headers,
      :language => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/fleets/#{fleet_id}/wings/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, EveESI.Model.GetFleetsFleetIdWings200Ok},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.GetFleetsFleetIdWingsNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Create fleet invitation
  Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `invitation` (PostFleetsFleetIdMembersInvitation): Details of the invitation
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_fleets_fleet_id_members(Tesla.Env.client, integer(), EveESI.Model.PostFleetsFleetIdMembersInvitation.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.PostFleetsFleetIdMembersNotFound.t} | {:ok, EveESI.Model.PostFleetsFleetIdMembersUnprocessableEntity.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def post_fleets_fleet_id_members(connection, fleet_id, invitation, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/fleets/#{fleet_id}/members/")
      |> add_param(:body, :body, invitation)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PostFleetsFleetIdMembersNotFound},
      {420, EveESI.Model.ErrorLimited},
      {422, EveESI.Model.PostFleetsFleetIdMembersUnprocessableEntity},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Create fleet wing
  Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.PostFleetsFleetIdWingsCreated.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_fleets_fleet_id_wings(Tesla.Env.client, integer(), keyword()) :: {:ok, EveESI.Model.PostFleetsFleetIdWingsNotFound.t} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.PostFleetsFleetIdWingsCreated.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def post_fleets_fleet_id_wings(connection, fleet_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/fleets/#{fleet_id}/wings/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, EveESI.Model.PostFleetsFleetIdWingsCreated},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PostFleetsFleetIdWingsNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Create fleet squad
  Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `wing_id` (integer()): The wing_id to create squad in
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, EveESI.Model.PostFleetsFleetIdWingsWingIdSquadsCreated.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_fleets_fleet_id_wings_wing_id_squads(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.PostFleetsFleetIdWingsWingIdSquadsCreated.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.PostFleetsFleetIdWingsWingIdSquadsNotFound.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def post_fleets_fleet_id_wings_wing_id_squads(connection, fleet_id, wing_id, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/fleets/#{fleet_id}/wings/#{wing_id}/squads/")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, EveESI.Model.PostFleetsFleetIdWingsWingIdSquadsCreated},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PostFleetsFleetIdWingsWingIdSquadsNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Update fleet
  Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `new_settings` (PutFleetsFleetIdNewSettings): What to update for this fleet
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_fleets_fleet_id(Tesla.Env.client, integer(), EveESI.Model.PutFleetsFleetIdNewSettings.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.PutFleetsFleetIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def put_fleets_fleet_id(connection, fleet_id, new_settings, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/fleets/#{fleet_id}/")
      |> add_param(:body, :body, new_settings)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PutFleetsFleetIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Move fleet member
  Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `member_id` (integer()): The character ID of a member in this fleet
  - `movement` (PutFleetsFleetIdMembersMemberIdMovement): Details of the invitation
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_fleets_fleet_id_members_member_id(Tesla.Env.client, integer(), integer(), EveESI.Model.PutFleetsFleetIdMembersMemberIdMovement.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.PutFleetsFleetIdMembersMemberIdNotFound.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.PutFleetsFleetIdMembersMemberIdUnprocessableEntity.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def put_fleets_fleet_id_members_member_id(connection, fleet_id, member_id, movement, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/fleets/#{fleet_id}/members/#{member_id}/")
      |> add_param(:body, :body, movement)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PutFleetsFleetIdMembersMemberIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {422, EveESI.Model.PutFleetsFleetIdMembersMemberIdUnprocessableEntity},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Rename fleet squad
  Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `squad_id` (integer()): The squad to rename
  - `naming` (PutFleetsFleetIdSquadsSquadIdNaming): New name of the squad
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_fleets_fleet_id_squads_squad_id(Tesla.Env.client, integer(), integer(), EveESI.Model.PutFleetsFleetIdSquadsSquadIdNaming.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.PutFleetsFleetIdSquadsSquadIdNotFound.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def put_fleets_fleet_id_squads_squad_id(connection, fleet_id, squad_id, naming, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/fleets/#{fleet_id}/squads/#{squad_id}/")
      |> add_param(:body, :body, naming)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PutFleetsFleetIdSquadsSquadIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end

  @doc """
  Rename fleet wing
  Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/` 

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `fleet_id` (integer()): ID for a fleet
  - `wing_id` (integer()): The wing to rename
  - `naming` (PutFleetsFleetIdWingsWingIdNaming): New name of the wing
  - `opts` (keyword): Optional parameters
    - `:datasource` (String.t): The server name you would like data from
    - `:token` (String.t): Access token to use if unable to set a header

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_fleets_fleet_id_wings_wing_id(Tesla.Env.client, integer(), integer(), EveESI.Model.PutFleetsFleetIdWingsWingIdNaming.t, keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.Unauthorized.t} | {:ok, EveESI.Model.Forbidden.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, EveESI.Model.PutFleetsFleetIdWingsWingIdNotFound.t} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def put_fleets_fleet_id_wings_wing_id(connection, fleet_id, wing_id, naming, opts \\ []) do
    optional_params = %{
      :datasource => :query,
      :token => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/fleets/#{fleet_id}/wings/#{wing_id}/")
      |> add_param(:body, :body, naming)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, EveESI.Model.BadRequest},
      {401, EveESI.Model.Unauthorized},
      {403, EveESI.Model.Forbidden},
      {404, EveESI.Model.PutFleetsFleetIdWingsWingIdNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end
end
