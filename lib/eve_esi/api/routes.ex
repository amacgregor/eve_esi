# NOTE: This file is auto generated by OpenAPI Generator 7.11.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule EveESI.Api.Routes do
  @moduledoc """
  API calls for all endpoints tagged `Routes`.
  """

  alias EveESI.Connection
  import EveESI.RequestBuilder

  @doc """
  Get route
  Get the systems between origin and destination  --- Alternate route: `/dev/route/{origin}/{destination}/`  Alternate route: `/legacy/route/{origin}/{destination}/`  Alternate route: `/v1/route/{origin}/{destination}/`  --- This route is cached for up to 86400 seconds

  ### Parameters

  - `connection` (EveESI.Connection): Connection to server
  - `destination` (integer()): destination solar system ID
  - `origin` (integer()): origin solar system ID
  - `opts` (keyword): Optional parameters
    - `:avoid` ([integer()]): avoid solar system ID(s)
    - `:connections` ([[integer()]]): connected solar system pairs
    - `:datasource` (String.t): The server name you would like data from
    - `:flag` (String.t): route security preference
    - `:"If-None-Match"` (String.t): ETag from a previous request. A 304 will be returned if this matches the current ETag

  ### Returns

  - `{:ok, [%Integer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_route_origin_destination(Tesla.Env.client, integer(), integer(), keyword()) :: {:ok, nil} | {:ok, EveESI.Model.ErrorLimited.t} | {:ok, EveESI.Model.InternalServerError.t} | {:ok, EveESI.Model.ServiceUnavailable.t} | {:ok, EveESI.Model.GetRouteOriginDestinationNotFound.t} | {:ok, EveESI.Model.BadRequest.t} | {:ok, [integer()]} | {:ok, EveESI.Model.GatewayTimeout.t} | {:error, Tesla.Env.t}
  def get_route_origin_destination(connection, destination, origin, opts \\ []) do
    optional_params = %{
      :avoid => :query,
      :connections => :query,
      :datasource => :query,
      :flag => :query,
      :"If-None-Match" => :headers
    }

    request =
      %{}
      |> method(:get)
      |> url("/route/#{origin}/#{destination}/")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, []},
      {304, false},
      {400, EveESI.Model.BadRequest},
      {404, EveESI.Model.GetRouteOriginDestinationNotFound},
      {420, EveESI.Model.ErrorLimited},
      {500, EveESI.Model.InternalServerError},
      {503, EveESI.Model.ServiceUnavailable},
      {504, EveESI.Model.GatewayTimeout}
    ])
  end
end
